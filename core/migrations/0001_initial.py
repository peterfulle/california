# Generated by Django 4.2.16 on 2025-10-25 23:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ChatConversation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(default="Nueva conversación", max_length=255),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_conversations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("email", models.EmailField(max_length=254)),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("read", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, null=True, unique=True)),
                ("description", models.TextField()),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("networking", "Networking Mixer"),
                            ("pitch_night", "Pitch Night"),
                            ("panel", "Panel Discussion"),
                            ("workshop", "Workshop"),
                            ("breakfast", "Founders Breakfast"),
                            ("demo_day", "Demo Day"),
                            ("investor_day", "Investor Day"),
                            ("conference", "Conference"),
                            ("webinar", "Webinar"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("cancelled", "Cancelled"),
                            ("completed", "Completed"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("start_datetime", models.DateTimeField(blank=True, null=True)),
                ("end_datetime", models.DateTimeField(blank=True, null=True)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("location", models.CharField(blank=True, max_length=300)),
                ("is_virtual", models.BooleanField(default=False)),
                ("meeting_url", models.URLField(blank=True)),
                ("max_attendees", models.IntegerField(default=50)),
                ("registration_required", models.BooleanField(default=True)),
                ("registration_deadline", models.DateTimeField(blank=True, null=True)),
                ("is_free", models.BooleanField(default=True)),
                (
                    "price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "target_audience",
                    models.JSONField(
                        default=list,
                        help_text="founders, investors, advisors, community",
                    ),
                ),
                ("agenda", models.TextField(blank=True)),
                ("sponsors", models.TextField(blank=True)),
                (
                    "featured_image",
                    models.ImageField(blank=True, null=True, upload_to="events/"),
                ),
                ("gallery_images", models.JSONField(blank=True, default=list)),
                ("featured", models.BooleanField(default=False)),
                ("is_recurring", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-start_datetime"],
            },
        ),
        migrations.CreateModel(
            name="Industry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("slug", models.SlugField(blank=True, null=True, unique=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Industries",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Startup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=200)),
                (
                    "tagline",
                    models.CharField(
                        help_text="Descripción en una línea", max_length=150
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Descripción detallada de la startup"),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="startup_logos/"
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="startup_covers/"
                    ),
                ),
                (
                    "stage",
                    models.CharField(
                        choices=[
                            ("idea", "Idea Stage"),
                            ("prototype", "Prototype"),
                            ("mvp", "MVP"),
                            ("early_traction", "Early Traction"),
                            ("growth", "Growth"),
                            ("scale", "Scale"),
                            ("exit", "Exit"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "revenue_stage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no_revenue", "No Revenue"),
                            ("pre_revenue", "Pre-Revenue"),
                            ("early_revenue", "Early Revenue ($1K-$10K MRR)"),
                            ("growing_revenue", "Growing Revenue ($10K-$100K MRR)"),
                            ("scale_revenue", "Scale Revenue ($100K+ MRR)"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("founded_date", models.DateField(blank=True, null=True)),
                ("employees_count", models.IntegerField(blank=True, null=True)),
                (
                    "problem_statement",
                    models.TextField(blank=True, help_text="¿Qué problema resuelven?"),
                ),
                (
                    "solution_description",
                    models.TextField(blank=True, help_text="¿Cómo lo resuelven?"),
                ),
                (
                    "market_size",
                    models.TextField(blank=True, help_text="Tamaño del mercado"),
                ),
                (
                    "business_model",
                    models.TextField(blank=True, help_text="Modelo de negocio"),
                ),
                (
                    "competitive_advantage",
                    models.TextField(blank=True, help_text="Ventaja competitiva"),
                ),
                ("sub_industry", models.CharField(blank=True, max_length=100)),
                (
                    "monthly_revenue",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "annual_revenue",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("monthly_users", models.IntegerField(blank=True, null=True)),
                (
                    "burn_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("runway_months", models.IntegerField(blank=True, null=True)),
                (
                    "customer_acquisition_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "lifetime_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "churn_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "total_funding_raised",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "seeking_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "valuation",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("website", models.URLField(blank=True)),
                ("pitch_deck_url", models.URLField(blank=True)),
                ("demo_url", models.URLField(blank=True)),
                ("is_public", models.BooleanField(default=True)),
                ("is_fundraising", models.BooleanField(default=False)),
                ("featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("founder", "Founder"),
                            ("investor", "Investor"),
                            ("advisor", "Advisor"),
                            ("community", "Community Member"),
                        ],
                        max_length=20,
                    ),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("linkedin_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                ("website_url", models.URLField(blank=True)),
                (
                    "profile_image",
                    models.ImageField(blank=True, null=True, upload_to="profiles/"),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=True)),
                ("show_contact_info", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StartupTechnology",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "technology_stack",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stack completo de tecnologías",
                    ),
                ),
                ("architecture_overview", models.TextField(blank=True)),
                ("infrastructure_details", models.TextField(blank=True)),
                (
                    "product_roadmap",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Roadmap detallado del producto",
                    ),
                ),
                ("feature_specifications", models.JSONField(blank=True, default=list)),
                ("technical_milestones", models.JSONField(blank=True, default=list)),
                (
                    "performance_metrics",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Métricas de performance del producto",
                    ),
                ),
                (
                    "uptime_statistics",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                ("security_measures", models.TextField(blank=True)),
                ("patents_filed", models.JSONField(blank=True, default=list)),
                ("trademarks", models.JSONField(blank=True, default=list)),
                ("trade_secrets", models.TextField(blank=True)),
                ("scalability_plan", models.TextField(blank=True)),
                ("technical_debt_assessment", models.TextField(blank=True)),
                ("development_methodology", models.TextField(blank=True)),
                ("compliance_standards", models.JSONField(blank=True, default=list)),
                ("data_privacy_measures", models.TextField(blank=True)),
                ("regulatory_considerations", models.TextField(blank=True)),
                ("api_documentation_url", models.URLField(blank=True)),
                ("technical_architecture_url", models.URLField(blank=True)),
                ("code_quality_reports_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "startup",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="private_technology",
                        to="core.startup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StartupPeople",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_employees",
                    models.IntegerField(default=0, help_text="Total de empleados"),
                ),
                (
                    "founders_count",
                    models.IntegerField(default=1, help_text="Número de fundadores"),
                ),
                (
                    "tech_team_size",
                    models.IntegerField(
                        default=0, help_text="Tamaño del equipo técnico"
                    ),
                ),
                (
                    "leadership_team_size",
                    models.IntegerField(
                        default=0, help_text="Tamaño del equipo de liderazgo"
                    ),
                ),
                (
                    "founders_detailed_bios",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Biografías detalladas de fundadores",
                    ),
                ),
                (
                    "equity_distribution",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Distribución de equity del equipo",
                    ),
                ),
                (
                    "company_mission",
                    models.TextField(blank=True, help_text="Misión de la empresa"),
                ),
                (
                    "company_vision",
                    models.TextField(blank=True, help_text="Visión de la empresa"),
                ),
                ("company_values", models.TextField(blank=True)),
                (
                    "work_mode",
                    models.CharField(
                        choices=[
                            ("remote", "Remoto"),
                            ("hybrid", "Híbrido"),
                            ("onsite", "Presencial"),
                        ],
                        default="hybrid",
                        max_length=20,
                    ),
                ),
                (
                    "main_location",
                    models.CharField(
                        blank=True, help_text="Ubicación principal", max_length=100
                    ),
                ),
                ("remote_work_policy", models.TextField(blank=True)),
                ("compensation_philosophy", models.TextField(blank=True)),
                ("diversity_initiatives", models.TextField(blank=True)),
                (
                    "hiring_plan_12m",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Plan de contrataciones a 12 meses",
                    ),
                ),
                (
                    "hiring_budget_annual",
                    models.CharField(
                        blank=True,
                        help_text="Presupuesto anual de contratación",
                        max_length=50,
                    ),
                ),
                (
                    "hiring_priority_1",
                    models.CharField(
                        blank=True,
                        help_text="Prioridad #1 de contratación",
                        max_length=100,
                    ),
                ),
                (
                    "recruitment_strategy",
                    models.TextField(
                        blank=True, help_text="Estrategia de reclutamiento"
                    ),
                ),
                ("key_roles_needed", models.TextField(blank=True)),
                ("org_chart_url", models.URLField(blank=True)),
                (
                    "advisory_board",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de advisors con detalles",
                    ),
                ),
                ("board_composition", models.JSONField(blank=True, default=dict)),
                ("employee_benefits", models.JSONField(blank=True, default=dict)),
                ("company_culture_deck_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "startup",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="private_people",
                        to="core.startup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StartupNews",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "monthly_updates",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Updates mensuales para inversionistas",
                    ),
                ),
                ("milestone_achievements", models.JSONField(blank=True, default=list)),
                ("upcoming_milestones", models.JSONField(blank=True, default=list)),
                ("competitive_analysis", models.TextField(blank=True)),
                ("market_developments", models.TextField(blank=True)),
                ("partnership_opportunities", models.TextField(blank=True)),
                (
                    "media_coverage",
                    models.JSONField(
                        blank=True, default=list, help_text="Cobertura de medios"
                    ),
                ),
                ("press_releases", models.JSONField(blank=True, default=list)),
                ("upcoming_events", models.JSONField(blank=True, default=list)),
                ("investor_letter_template", models.TextField(blank=True)),
                ("quarterly_reports", models.JSONField(blank=True, default=list)),
                ("customer_testimonials", models.JSONField(blank=True, default=list)),
                ("case_studies", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "startup",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="private_news",
                        to="core.startup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StartupFinancials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "arr_current",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Annual Recurring Revenue actual",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "mrr_growth_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Tasa de crecimiento MRR (porcentaje)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "revenue_forecast_12m",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "revenue_forecast_24m",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "cac_payback_period",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Meses para recuperar CAC",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "gross_margin",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Margen bruto (porcentaje)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "net_revenue_retention",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "cash_position",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Efectivo actual en banco",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "burn_rate_detailed",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Burn rate mensual detallado",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "runway_calculation",
                    models.TextField(
                        blank=True, help_text="Cálculo detallado del runway"
                    ),
                ),
                (
                    "funding_use_breakdown",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Desglose de uso de fondos por categoría",
                    ),
                ),
                (
                    "financial_projections",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Proyecciones financieras detalladas",
                    ),
                ),
                ("current_round_details", models.TextField(blank=True)),
                (
                    "previous_investors",
                    models.TextField(
                        blank=True, help_text="Lista de inversionistas previos"
                    ),
                ),
                ("terms_and_conditions", models.TextField(blank=True)),
                ("financial_statements_url", models.URLField(blank=True)),
                ("cap_table_url", models.URLField(blank=True)),
                ("business_plan_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "startup",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="private_financials",
                        to="core.startup",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="startup",
            name="founder",
            field=models.ForeignKey(
                limit_choices_to={"user_type": "founder"},
                on_delete=django.db.models.deletion.CASCADE,
                to="core.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="startup",
            name="industry",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.industry",
            ),
        ),
        migrations.CreateModel(
            name="PrivateDataAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "section_accessed",
                    models.CharField(
                        choices=[
                            ("financials", "Financials"),
                            ("people", "People"),
                            ("news", "News"),
                            ("technology", "Technology"),
                        ],
                        max_length=50,
                    ),
                ),
                ("accessed_at", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "investor",
                    models.ForeignKey(
                        limit_choices_to={"user_type": "investor"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.userprofile",
                    ),
                ),
                (
                    "startup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.startup"
                    ),
                ),
            ],
            options={
                "ordering": ["-accessed_at"],
            },
        ),
        migrations.CreateModel(
            name="InvestorProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fund_name", models.CharField(max_length=200)),
                (
                    "investor_type",
                    models.CharField(
                        choices=[
                            ("angel", "Angel Investor"),
                            ("vc_fund", "VC Fund"),
                            ("corporate_vc", "Corporate VC"),
                            ("family_office", "Family Office"),
                            ("accelerator", "Accelerator"),
                            ("government", "Government Fund"),
                            ("strategic", "Strategic Investor"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "investment_stages",
                    models.JSONField(
                        default=list, help_text="Etapas de inversión preferidas"
                    ),
                ),
                (
                    "geographic_focus",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("global", "Global"),
                            ("north_america", "North America"),
                            ("latin_america", "Latin America"),
                            ("europe", "Europe"),
                            ("asia", "Asia"),
                            ("africa", "Africa"),
                            ("local", "Local Market Only"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "min_investment",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "max_investment",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "typical_investment",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "fund_size",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "portfolio_companies_count",
                    models.IntegerField(blank=True, null=True),
                ),
                ("investments_per_year", models.IntegerField(blank=True, null=True)),
                (
                    "thesis",
                    models.TextField(blank=True, help_text="Tesis de inversión"),
                ),
                (
                    "sweet_spot",
                    models.TextField(blank=True, help_text="Sweet spot de inversiones"),
                ),
                ("notable_investments", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_accepting_pitches", models.BooleanField(default=True)),
                ("featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FounderProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=200)),
                (
                    "industry",
                    models.CharField(
                        choices=[
                            ("fintech", "Fintech"),
                            ("healthtech", "HealthTech"),
                            ("edtech", "EdTech"),
                            ("proptech", "PropTech"),
                            ("deeptech", "DeepTech"),
                            ("saas", "SaaS"),
                            ("ecommerce", "E-commerce"),
                            ("ai_ml", "AI/ML"),
                            ("biotech", "Biotech"),
                            ("cleantech", "CleanTech"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "funding_stage",
                    models.CharField(
                        choices=[
                            ("pre_seed", "Pre-Seed"),
                            ("seed", "Seed"),
                            ("series_a", "Series A"),
                            ("series_b", "Series B+"),
                            ("revenue", "Revenue Stage"),
                        ],
                        max_length=50,
                    ),
                ),
                ("country_origin", models.CharField(max_length=100)),
                ("linkedin_url", models.URLField(blank=True)),
                ("company_website", models.URLField(blank=True)),
                ("pitch_deck_url", models.URLField(blank=True)),
                ("brief_description", models.TextField(max_length=500)),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="founder_logos/"
                    ),
                ),
                ("featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Founder Profile (Legacy)",
            },
        ),
        migrations.CreateModel(
            name="EventComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="core.event",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="core.eventcomment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("user", "Usuario"),
                            ("assistant", "Asistente"),
                            ("system", "Sistema"),
                        ],
                        max_length=10,
                    ),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="core.chatconversation",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="InvestorAccessRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("revoked", "Access Revoked"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Mensaje del inversionista explicando su interés",
                        max_length=1000,
                    ),
                ),
                (
                    "review_message",
                    models.TextField(blank=True, help_text="Respuesta del fundador"),
                ),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de expiración del acceso",
                        null=True,
                    ),
                ),
                (
                    "investor",
                    models.ForeignKey(
                        limit_choices_to={"user_type": "investor"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_requests",
                        to="core.userprofile",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_requests",
                        to="core.userprofile",
                    ),
                ),
                (
                    "startup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_requests",
                        to="core.startup",
                    ),
                ),
            ],
            options={
                "ordering": ["-requested_at"],
                "unique_together": {("investor", "startup")},
            },
        ),
        migrations.CreateModel(
            name="EventRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("registered", "Registered"),
                            ("attended", "Attended"),
                            ("no_show", "No Show"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="registered",
                        max_length=20,
                    ),
                ),
                ("registration_date", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registrations",
                        to="core.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("event", "user")},
            },
        ),
        migrations.CreateModel(
            name="EventAttendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("will_attend", "Asistiré"),
                            ("maybe", "Tal vez"),
                            ("wont_attend", "No asistiré"),
                        ],
                        default="will_attend",
                        max_length=20,
                    ),
                ),
                (
                    "guest_count",
                    models.IntegerField(
                        default=1,
                        help_text="Número de personas que asistirán (incluyéndote)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendances",
                        to="core.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("event", "user")},
            },
        ),
    ]
